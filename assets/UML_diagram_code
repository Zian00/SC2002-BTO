@startuml
' ==== Entities ====
package entity {
    class User {
        - String NRIC
        - String name
        - String password
        - int age
        - MaritalState maritalStatus
        - String filterSettings
        - Role role
        + String getNRIC()
        + String getName()
        + String getPassword()
        + int getAge()
        + MaritalState getMaritalStatus()
        + String getFilterSettings()
        + Role getRole()
        + void setPassword(String)
        + void setFilterSettings(String)
    }
    class HDBManager extends User

    class BTOProject {
        - int projectID
        - String projectName
        - String projectLocation
        - List~String~ approvedOfficer
        - List~String~ pendingOfficer
        - boolean visibility
        - int availableOfficerSlots
        - LocalDate applicationOpeningDate
        - LocalDate applicationClosingDate
        + int getProjectID()
        + String getProjectName()
        + String getProjectLocation()
        + List~String~ getApprovedOfficer()
        + List~String~ getPendingOfficer()
        + boolean isVisibility()
        + int getAvailableOfficerSlots()
        + LocalDate getApplicationOpeningDate()
        + LocalDate getApplicationClosingDate()
    }
    class BTOApplication {
        - int applicationId
        - String applicantNRIC
        - int projectID
        - FlatType flatType
        - ApplicationStatus status
        - ApplicationType type
        + int getApplicationId()
        + String getApplicantNRIC()
        + int getProjectID()
        + FlatType getFlatType()
        + ApplicationStatus getStatus()
        + ApplicationType getType()
    }
    class OfficerApplication {
        - int officerApplicationId
        - String officerNRIC
        - int projectID
        - RegistrationStatus status
        + int getOfficerApplicationId()
        + String getOfficerNRIC()
        + int getProjectID()
        + RegistrationStatus getStatus()
    }
    class Enquiry {
        - int enquiryId
        - String enquiryText
        - String response
        - String applicantNRIC
        - int projectId
        - LocalDateTime timestamp
        + int getEnquiryId()
        + String getEnquiryText()
        + String getResponse()
        + String getApplicantNRIC()
        + int getProjectId()
        + LocalDateTime getTimestamp()
    }
    class FilterSettings {
        - String roomType
        - Integer minPrice
        - Integer maxPrice
        + String getRoomType()
        + Integer getMinPrice()
        + Integer getMaxPrice()
        + String toCsv()
    }
}

' ==== Enumerations ====
enum MaritalState
enum Role
enum FlatType
enum ApplicationStatus
enum ApplicationType
enum RegistrationStatus

' ==== Repositories ====
package entity.repositories {
    class UserCSVRepository {
        + List~User~ readUserFromCSV()
        + void writeUserToCSV(List~User~)
    }
    class BTOProjectCSVRepository {
        + List~BTOProject~ readBTOProjectFromCSV()
        + void writeBTOProjectToCSV(List~BTOProject~)
    }
    class ApplicationCSVRepository {
        + List~BTOApplication~ readApplicationFromCSV()
        + void writeApplicationToCSV(List~BTOApplication~)
    }
    class OfficerApplicationCSVRepository {
        + List~OfficerApplication~ readOfficerApplicationsFromCSV()
        + void writeOfficerApplicationsToCSV(List~OfficerApplication~)
    }
    class EnquiryCSVRepository {
        + List~Enquiry~ readEnquiriesFromCSV()
        + void writeEnquiriesToCSV(List~Enquiry~)
    }
}

' ==== Interfaces ====
package entity.interfaces {
    interface IEnquirySubmission {
        + Enquiry createEnquiry(int, String)
        + boolean editEnquiry(Enquiry, String)
        + boolean deleteEnquiry(Enquiry)
    }
    interface IEnquiryResponse {
        + boolean responseEnquiry(Enquiry, String)
    }
}

' ==== Controllers ====
package controllers {
    class UserCTRL {
        - List~User~ userList
        - User currentUser
        - UserCSVRepository userRepo
        + void loadUserData()
        + void saveUserData()
        + void runCentralMenu(Scanner, UserCTRL)
        + void handleChangePassword(Scanner, UserCTRL)
        + boolean login(String, String)
        + void updateFilterSettings(User, String)
        + boolean changePassword(String)
        + User getCurrentUser()
        + void setCurrentUser(User)
        + User getUserByNRIC(String)
    }
    class BTOProjectCTRL {
        - List~BTOProject~ projects
        - User currentUser
        - BTOProjectCSVRepository repo
        + BTOProjectCTRL(User)
        + void runProjectMenu(Scanner, UserCTRL, BTOProjectCTRL, BTOProjectView, BTOApplicationCTRL, OfficerApplicationCTRL, OfficerApplicationView, EnquiryView, EnquiryCTRL)
        + BTOProject getProjectById(int)
        + int getNextProjectID()
        + void createProject(BTOProject)
        + boolean editProject(int, BTOProject)
        + boolean deleteProject(int)
        + List~BTOProject~ getFilteredProjects()
        + List~BTOProject~ getAllProjects()
        + List~BTOProject~ getHandledProjects()
        + List~BTOProject~ getFilteredProjectsForUser(User)
        + void updateUserFilterSettings(User, FilterSettings)
        + void updateProjectVisibility()
        + void saveProjects()
        + List~BTOProject~ getEligibleProjectsForOfficerApplication(String, MaritalState, int)
    }
    class BTOApplicationCTRL {
        - List~BTOApplication~ applicationList
        - List~BTOProject~ projects
        - User currentUser
        - ApplicationCSVRepository appRepo
        - BTOProjectCSVRepository projRepo
        + BTOApplicationCTRL(User)
        + void runApplicationMenu(Scanner, UserCTRL, BTOProjectCTRL, BTOApplicationCTRL, BTOApplicationView)
        + List~BTOApplication~ viewUserApplications()
        + boolean apply(int, FlatType)
        + boolean withdraw(int)
        + List~BTOApplication~ getApplicationsHandledByManager()
        + List~BTOApplication~ getApplicationsHandledByOfficer()
        + boolean updateApplicationStatus(int, String)
        + boolean processApplicationDecision(int, String, BTOProjectCTRL)
        + boolean bookApplication(int, BTOProjectCTRL)
        + BTOApplication getApplicationById(int)
        + List~BTOProject~ getProjects()
        + boolean bookAndGenerateReceipt(int, BTOProjectCTRL, UserCTRL)
        + boolean approveWithdrawalApplication(int, BTOProjectCTRL)
        + List~BTOApplication~ generateReport(MaritalState, String, Integer, Integer, String, List~BTOProject~, UserCTRL)
    }
    class OfficerApplicationCTRL {
        - List~OfficerApplication~ officerApplicationList
        - List~BTOApplication~ btoApplicationList
        - List~BTOProject~ projects
        - User currentUser
        - OfficerApplicationCSVRepository officerRepo
        - ApplicationCSVRepository appRepo
        - BTOProjectCSVRepository projRepo
        + OfficerApplicationCTRL(User)
        + void runOfficerApplicationMenu(Scanner, OfficerApplicationCTRL, OfficerApplicationView, BTOProjectCTRL)
        + List~OfficerApplication~ viewUserOfficerApplications()
        + boolean registerAsOfficer(int)
        + List~OfficerApplication~ getPendingOfficerApplicationsForManager()
        + boolean processOfficerApplicationDecision(int, String)
        + boolean isApprovedOfficerForProject(int)
        + List~BTOProject~ getEligibleOfficerProjects()
        + List~OfficerApplication~ getPendingAndSuccessfullOfficerApplicationsForManager()
    }
    class EnquiryCTRL implements IEnquirySubmission, IEnquiryResponse {
        - List~Enquiry~ enquiries
        - User currentUser
        - EnquiryCSVRepository enquiryRepo
        + void loadEnquiryData()
        + void saveEnquiryData()
        + EnquiryCTRL(User)
        + List~Enquiry~ getEnquiries()
        + void runEnquiryMenu(Scanner, UserCTRL, BTOProjectCTRL, EnquiryView, EnquiryCTRL)
        + Enquiry findEnquiryById(List~Enquiry~, int)
        + List~Enquiry~ getFilteredEnquiriesByNRIC()
        + List~Enquiry~ getFilteredEnquiriesByManager(List~BTOProject~)
        + List~Enquiry~ getFilteredEnquiriesByOfficer(List~BTOProject~)
        + List~Enquiry~ getEditableEnquiriesByNRIC()
        + Enquiry createEnquiry(int, String)
        + boolean editEnquiry(Enquiry, String)
        + boolean deleteEnquiry(Enquiry)
        + boolean responseEnquiry(Enquiry, String)
    }
}

' ==== Views ====
package boundaries {
    class UserView {
        + boolean loginFlow(Scanner, UserCTRL)
        + void displayLogin()
        + void displayLogout()
        + void displayMenu()
    }
    class ApplicantView extends UserView {
        + void displayMenu()
    }
    class OfficerView extends ApplicantView {
        + void displayMenu()
    }
    class ManagerView extends UserView {
        + void displayMenu()
    }
    class BTOProjectView {
        + void displayApplicantMenu()
        + void displayOfficerMenu()
        + void displayManagerMenu()
        + void displayAllProject(List~BTOProject~)
        + void displayManagerProjects(List~BTOProject~)
        + void displayProjectIdNameList(List~BTOProject~)
        + void displayAvailableForApplicantNoFilter(User, List~BTOProject~)
        + void displayAvailableForApplicant(User, List~BTOProject~)
        + int promptProjectID(Scanner)
        + FilterSettings promptFilterSettings(User, Scanner)
        + void showMessage(String)
        + void displayHandledProjects(List~BTOProject~)
        + void displayEligibleProjectsForOfficer(List~BTOProject~, MaritalState, int)
    }
    class BTOApplicationView {
        + void displayApplicantMenu()
        + void displayOfficerMenu()
        + void displayManagerMenu()
        + void displayAllApplications(List~BTOApplication~)
        + void displayUserApplication(List~BTOApplication~, User, List~BTOProject~)
        + boolean displayPendingApplications(List~BTOApplication~, List~BTOProject~)
        + boolean displaySuccessfulApplications(List~BTOApplication~, List~BTOProject~)
        + MaritalState promptMaritalStatusFilter(Scanner)
        + String promptFlatTypeFilter(Scanner)
        + Integer promptMinAge(Scanner)
        + Integer promptMaxAge(Scanner)
        + String promptNeighbourhoodFilter(Scanner)
    }
    class OfficerApplicationView {
        + void displayOfficerMenu()
        + void displayManagerMenu()
        + void displayOfficerApplications(List~OfficerApplication~)
        + void displayEligibleProjects(List~BTOProject~)
        + void displayManagerPendingApplications(List~OfficerApplication~, List~BTOProject~)
        + void displayAllApplications(List~OfficerApplication~, List~BTOProject~)
    }
    class EnquiryView {
        + void displayApplicantMenu()
        + void displayOfficerMenu()
        + void displayManagerMenu()
        + String promptEnquiryCreation(Scanner)
        + int promptEnquirySelection(List~Enquiry~, Scanner)
        + boolean promptDeletionConfirmation(Scanner)
        + String promptNewEnquiryText(String, Scanner)
        + String promptResponseText(Scanner)
        + void displayEnquiry(Enquiry)
        + void displayEnquiryWithResponse(Enquiry)
        + void displayAllEnquiries(List~BTOProject~, List~Enquiry~)
        + void displayFilteredEnquiries(List~BTOProject~, List~Enquiry~)
        + void showMessage(String)
    }
}

' ==== Main ====
class Main {
    + static void main(String[])
}

' ==== Relationships ====
UserCTRL --> User
UserCTRL --> UserCSVRepository
UserCTRL --> boundaries.UserView
UserCTRL --> boundaries.ApplicantView
UserCTRL --> boundaries.OfficerView
UserCTRL --> boundaries.ManagerView

BTOProjectCTRL --> BTOProject
BTOProjectCTRL --> BTOProjectCSVRepository
BTOProjectCTRL --> boundaries.BTOProjectView

BTOApplicationCTRL --> BTOApplication
BTOApplicationCTRL --> ApplicationCSVRepository
BTOApplicationCTRL --> BTOProjectCSVRepository
BTOApplicationCTRL --> boundaries.BTOApplicationView

OfficerApplicationCTRL --> OfficerApplication
OfficerApplicationCTRL --> OfficerApplicationCSVRepository
OfficerApplicationCTRL --> boundaries.OfficerApplicationView

EnquiryCTRL ..|> IEnquirySubmission
EnquiryCTRL ..|> IEnquiryResponse
EnquiryCTRL --> Enquiry
EnquiryCTRL --> EnquiryCSVRepository
EnquiryCTRL --> boundaries.EnquiryView

boundaries.ApplicantView --|> boundaries.UserView
boundaries.OfficerView --|> boundaries.ApplicantView
boundaries.ManagerView --|> boundaries.UserView

Main --> UserCTRL
Main --> UserView

HDBManager --|> User

User --> MaritalState
User --> Role
BTOProject --> FlatType
BTOApplication --> ApplicationStatus
BTOApplication --> ApplicationType
OfficerApplication --> RegistrationStatus
@enduml